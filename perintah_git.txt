
===============================================================================
=== MATERI GIT COMMIT PADA WORKING TREE AREA, STAGING AREA, DAN COMMIT AREA ===
===============================================================================

git init 
 - untuk membuat folder biasa menjadi folder git
 - saat melakukan ini pastikan kamu berada di dalam folder yang dimaksud

#Perintah ini dilakukan ketika biasanya pertama kali mengomit di laptop kita agar git tahu siapa kita (yang melakukan perubahan)
git config --global user.name "my name" (1x di awal)
git config --global user.email "my email.com" (1x di awal)
  - sebaiknya sesuaikan username dan email yang digunakan pada github

git status
 > Jika berwarna merah berarti perubahan tsb masih ada di working tree (STAGE LEVEL 1)
   - yang harus dilakukan adalah memindahkan perubahan tersebut ke staging area (STAGE LEVEL 2)
   - gunakan perintah (git add <nama file>) untuk memindahkan satu persatu
   - namun jika ada banyak perubahan file gunakan (git add .) sehingga otomatis semua file akan berpindah ke staging area.

 > Jika berwarna hijau berarti perubahan tsb masih ada di staging area (STAGE LEVEL 2)
   - yang harus dilakukan adalah memindahkan perubahan tersebut ke master branch (STAGE LEVEL 3)
   - gunakan perintah (git commit -m "<keterangan perubahan apa yang dilakukan>"
   - contoh (git commit -m "menambahkan bagian baru pada file style.css"

git add / git add .
 - untuk memindahkan file perubahan dari working tree ke staging area satu persatu (git add <nama file>)
 - untuk memindahkan file perubahan dari working tree ke staging area ke semua file berwarna merah (git add .)

git commit -m "<keterangan perubahan apa yang dilakukan>"
 - selalu ingat lakukan commit ketika file perubahan sudah ada di staging area atau ketika file perubahan berwarna hijau

git log | git log -- namafile | 
 - untuk melihat history apa aja yang udah pernah dilakuin di repo ini secara keseluruhan (git log)
 - jika ingin melihat beberapa saja history nya misal cuma ingin melihat 3 perubahan terakhir, maka perintahnya adalah (git log -3)
 - hasil nya biasanya seperti dibawah ini

   commit 3y5759hg784059j74949403h38394939j39920283h39494
   Author: Avicomp <rizalfathurr1999@gmail.com>
   Date: Mon Apr 16 14:28:40 2021 +0700

 - kumpulan angka dan huruf random disebelah commit di atas namanya "hash"

git checkout <5 digit pertama hash pada file yang dimaksud> -- <nama file yang ingin dikembalikan>
 - digunakan ketika kita sebelumnya sudah menghapus file kemudian ingin merollback file tersebut ada lagi
 - setelah itu file itu pasti ada di staging area, maka dari itu lakukan commit kembali pada file tersebut (git commit -m "mengembalikan file")
 - untuk pindah commit lah intinya

================================================================================
======== MATERI GIT BRANCH (FAST FORWARD) DAN (RECURSIVE/THREE-WAY) ===========
================================================================================

git branch | git branch <nama branch baru>
 - perintah untuk melihat kita ada di branch yang mana (git branch)
 - perintah untuk membuat branch baru (git branch <nama branch baru>)
 
git checkout <nama branch tujuan>
 - untuk merubah posisi HEAD (sebagai pointer arah branch) ke branch tujuan kita
 - misal (git checkout cabang-baru-1)
 - kenapa kita harus mengubah arah HEAD ?
   : karena apabila kita ingin membuat sebuah branch (dalam arti= cabang yang entah akan digunakan atau tidak) maka perlu dilakukan di luar master branch
   : jika tidak, maka ketika kita membuat perubahan dalam file, maka akan mempengaruhi branch di master
 - dan pastikan lagi setelah berpindah kamu berada di branch yang memang kamu tuju dengan (git branch)
 - keliatan kok zal kalao lagi di master branch atau tidak, daftar file nya pasti berubah kalau bukan di masterbranch

git log --all --decorate --oneline --graph
 - perintah ini untuk melihat grafik perubahan seperti pada github yang di insight > network itu lo zal
 - alias graph="git log --all --decorate --oneline --graph
 - alias akan menjadikan graph sebagai shortcut command dari perintah ini, sehingga kamu tidak perlu panjang2 lagi menuliskan perintah ini. 
 - kamu juga bisa membuat shortcut dengan nama lain zal. 
 - maka untuk melihat grafik perubahan kamu tinggal menggunakan perintah (graph)
 
git merge <nama branch> | git branch --merged | git branch -d <nama branch yang sudah dimerge>
   ==========================================================================
 - | ingat!! sebelum merge, pastikan HEAD (pointer) berada di branch master |
   ==========================================================================
 - contoh ilustrasi
	
     (branch-a)		       (branch-c)
	   \      (branch-b)     /
	    \         |         /
 	     \        |        /
	      \       |       /
	       \      |      /
		\     |     /
		 \    |    /
		  \   |   /
		   \  |  /
		    \ | /
		     \|/
		      |
		      |
		      |
		      |
		      | (branch master) <-HEAD	
		      |
		      |
		      |
		      *
 - FAST-FORWARD merge adalah merge yg dapat dilakukan dengan jalur langsung.
 - di ilustrasi fast-forward dapat terjadi ketika pertama kali dilakukan merge. contoh (branch a - branch master) / (branch b - branch master) / (branch c - branch master)
 - merge setelah nya dinamakan THREE-WAYS merge yaitu penggabungan cabang sebab tidak memiliki jalur langsung.
 - contoh : misal di awal dilakukan merge branch a dan master, hasil dari merge tersebut dinamakan fast forward. kemudian dilakukan merge ke branch b (three-ways/recursive), dst.
 - biasanya saat (three-ways/recursive merge) akan dimunculkan text editor default pilihan kamu (notepad++) dan pada tulisan hitam kamu bisa ganti atau gunakan default seperti itu saja dengan mengklik close. maka merge akan berjalan
 =================================================================================================
 | biasakan!! untuk melihat cabang mana yang telah di merge dengan bantuan (git branch --merged) |
 =================================================================================================
 - apabila cabang berhasil di merged, kamu bisa menghapus cabang tersebut dengan perintah (git branch -d <nama branch yang sudah di merge dan ingin dihapus>)

